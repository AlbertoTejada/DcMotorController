/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 36.1.0 Tue Jan 26 21:24:21 2021.
 */

#ifndef DBC_H
#define DBC_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define DBC_UDS_MOTOR_01_FRAME_ID (0x04u)
#define DBC_XCP_MOTOR_01_FRAME_ID (0x02u)
#define DBC_SPEED_AND_DIRECTION_FRAME_ID (0x01u)
#define DBC_MOTION_CONTROL_FRAME_ID (0x00u)

/* Frame lengths in bytes. */
#define DBC_UDS_MOTOR_01_LENGTH (8u)
#define DBC_XCP_MOTOR_01_LENGTH (8u)
#define DBC_SPEED_AND_DIRECTION_LENGTH (4u)
#define DBC_MOTION_CONTROL_LENGTH (8u)

/* Extended or standard frame types. */
#define DBC_UDS_MOTOR_01_IS_EXTENDED (0)
#define DBC_XCP_MOTOR_01_IS_EXTENDED (0)
#define DBC_SPEED_AND_DIRECTION_IS_EXTENDED (0)
#define DBC_MOTION_CONTROL_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define DBC_UDS_MOTOR_01_CYCLE_TIME_MS (0u)
#define DBC_XCP_MOTOR_01_CYCLE_TIME_MS (0u)
#define DBC_SPEED_AND_DIRECTION_CYCLE_TIME_MS (100u)
#define DBC_MOTION_CONTROL_CYCLE_TIME_MS (100u)

/* Signal choices. */


/**
 * Signals in message UDS_Motor_01.
 *
 * All signal values are as on the CAN bus.
 */
struct dbc_uds_motor_01_t {
    /**
     * Range: 0..18446744073709600000 (0..1.84467440737096E+19 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t uds_motor_01_signal;
};

/**
 * Signals in message XCP_Motor_01.
 *
 * All signal values are as on the CAN bus.
 */
struct dbc_xcp_motor_01_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t xcp_motor_01_signal;
};

/**
 * Signals in message SpeedAndDirection.
 *
 * Current speed and direction od the car
 *
 * All signal values are as on the CAN bus.
 */
struct dbc_speed_and_direction_t {
    /**
     * Motor status:
     * 0 = Deactive
     * 1 = Active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_state;

    /**
     * Current angle of the wheels
     *
     * Range: -16384..16383 (-16384..16383 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t wheels_direction;

    /**
     * Current speed of the motor
     *
     * Range: -32768..32767 (-32768..32767 mm/s)
     * Scale: 1
     * Offset: 0
     */
    int16_t motor_speed;
};

/**
 * Signals in message MotionControl.
 *
 * Speed and direction control target values.
 *
 * All signal values are as on the CAN bus.
 */
struct dbc_motion_control_t {
    /**
     * Command enable/disable the motor
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t enable_motor;

    /**
     * Target direction of the wheels
     *
     * Range: -16384..16383 (-16384..16383 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t targert_direction;

    /**
     * Target speed of the motor in mm/s
     *
     * Range: -32768..32767 (-32768..32767 mm/s)
     * Scale: 1
     * Offset: 0
     */
    int16_t target_speed;
};

/**
 * Unpack message UDS_Motor_01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int dbc_uds_motor_01_unpack(
    struct dbc_uds_motor_01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double dbc_uds_motor_01_uds_motor_01_signal_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool dbc_uds_motor_01_uds_motor_01_signal_is_in_range(uint64_t value);

/**
 * Unpack message XCP_Motor_01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int dbc_xcp_motor_01_unpack(
    struct dbc_xcp_motor_01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double dbc_xcp_motor_01_xcp_motor_01_signal_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool dbc_xcp_motor_01_xcp_motor_01_signal_is_in_range(uint64_t value);

/**
 * Pack message SpeedAndDirection.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int dbc_speed_and_direction_pack(
    uint8_t *dst_p,
    const struct dbc_speed_and_direction_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t dbc_speed_and_direction_motor_state_encode(double value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t dbc_speed_and_direction_wheels_direction_encode(double value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t dbc_speed_and_direction_motor_speed_encode(double value);

/**
 * Unpack message MotionControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int dbc_motion_control_unpack(
    struct dbc_motion_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double dbc_motion_control_enable_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool dbc_motion_control_enable_motor_is_in_range(uint8_t value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double dbc_motion_control_targert_direction_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool dbc_motion_control_targert_direction_is_in_range(int16_t value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double dbc_motion_control_target_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool dbc_motion_control_target_speed_is_in_range(int16_t value);


#ifdef __cplusplus
}
#endif

#endif
